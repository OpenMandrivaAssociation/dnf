From 312f403044e72c2e630d72caa7a2820dbd95ff25 Mon Sep 17 00:00:00 2001
From: Marek Blaha <mblaha@redhat.com>
Date: Fri, 1 Sep 2023 10:52:30 +0200
Subject: [PATCH] base: Call rpmReadConfigFiles() earlier

Currently, libdnf5 initializes librpm only when detecting `arch` or
`releasever` variables. In case both these values are provided using
command line options (--releasever, --forcearch), `rpmReadConfigFiles()`
is not called at all, resulting in uninitialized librpm.

This patch moves `init_lib_rpm()` call to the `Base` class constructor,
ensuring that `rpmReadConfigFiles()` is always called.

Resolves: https://github.com/rpm-software-management/dnf5/issues/855
---
 libdnf5/base/base.cpp | 13 +++++++++++++
 libdnf5/conf/vars.cpp | 12 ------------
 2 files changed, 13 insertions(+), 12 deletions(-)

diff --git a/libdnf5/base/base.cpp b/libdnf5/base/base.cpp
index 597c4b1fd..aa7f30665 100644
--- a/libdnf5/base/base.cpp
+++ b/libdnf5/base/base.cpp
@@ -28,6 +28,8 @@ along with libdnf.  If not, see <https://www.gnu.org/licenses/>.
 #include "libdnf5/conf/const.hpp"
 #include "libdnf5/utils/bgettext/bgettext-mark-domain.h"
 
+#include <rpm/rpmlib.h>
+
 #include <algorithm>
 #include <atomic>
 #include <cstdlib>
@@ -40,6 +42,16 @@ namespace libdnf5 {
 static std::atomic<Base *> locked_base{nullptr};
 static std::mutex locked_base_mutex;
 
+static void init_lib_rpm() {
+    static bool lib_rpm_initiated{false};
+    if (!lib_rpm_initiated) {
+        if (rpmReadConfigFiles(nullptr, nullptr) != 0) {
+            throw RuntimeError(M_("failed to read rpm config files"));
+        }
+        lib_rpm_initiated = true;
+    }
+}
+
 Base::Base(std::vector<std::unique_ptr<Logger>> && loggers)
     : p_impl(new Impl(get_weak_ptr())),
       log_router(std::move(loggers)),
@@ -47,6 +59,7 @@ Base::Base(std::vector<std::unique_ptr<Logger>> && loggers)
       rpm_package_sack(get_weak_ptr()),
       transaction_history(get_weak_ptr()),
       vars(get_weak_ptr()) {
+    init_lib_rpm();
     load_defaults();
 }
 
diff --git a/libdnf5/conf/vars.cpp b/libdnf5/conf/vars.cpp
index 685307d94..a68cbceb4 100644
--- a/libdnf5/conf/vars.cpp
+++ b/libdnf5/conf/vars.cpp
@@ -109,16 +109,6 @@ static const char * get_base_arch(const char * arch) {
     return nullptr;
 }
 
-static void init_lib_rpm() {
-    static bool lib_rpm_initiated{false};
-    if (!lib_rpm_initiated) {
-        if (rpmReadConfigFiles(nullptr, nullptr) != 0) {
-            throw RuntimeError(M_("failed to read rpm config files"));
-        }
-        lib_rpm_initiated = true;
-    }
-}
-
 static constexpr const char * DISTROVERPKGS[] = {
     "system-release(releasever)",
     "system-release",
@@ -128,7 +118,6 @@ static constexpr const char * DISTROVERPKGS[] = {
     "suse-release"};
 
 static std::string detect_arch() {
-    init_lib_rpm();
     std::string value{};
     char * tmp = rpmExpand("%{_host_cpu}", NULL);
     if (tmp != nullptr) {
@@ -143,7 +132,6 @@ static std::string detect_arch() {
 
 
 std::unique_ptr<std::string> Vars::detect_release(const BaseWeakPtr & base, const std::string & install_root_path) {
-    init_lib_rpm();
     std::unique_ptr<std::string> release_ver;
 
     libdnf5::rpm::RpmLogGuard rpm_log_guard(base);
